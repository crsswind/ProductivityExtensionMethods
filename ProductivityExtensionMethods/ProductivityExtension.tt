<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".methods.tt" #>
\<#@ template debug="false" hostspecific="true" language="C#" \#>
\<#@ assembly name="System.Core" \#>
\<#@ assembly name="EnvDte" \#>
\<#@ assembly name="System.Xml" \#>
\<#@ assembly name="System.Xml.Linq" \#>
\<#@ import namespace="System.IO" \#>
\<#@ import namespace="System.Linq" \#>
\<#@ import namespace="System.Xml.Linq" \#>
\<#@ import namespace="System.Text" \#>
\<#@ import namespace="System.Collections.Generic" \#>
\<#@ output extension=".cs" \#>
\<#
<#

 string extensionMethodsSourceCode = File.ReadAllText(this.Host.ResolvePath("AllExtensions.cs"));
 
 Regex regionFinderRegex=new Regex(@"(?=#region\s+(?<RegionName>[^\r\n]+))(?:(?<ltparen>(?(content)(?(ltparen)#region\s+[^\r\n]*\r\n|)|#region\s+[^\r\n]*\r\n))|(?<content-ltparen>#endregion)|(?(ltparen)(?(#region\s+[^\r\n]*\r\n|#endregion)|.+?)|))+",  RegexOptions.IgnoreCase|  RegexOptions.Singleline|  RegexOptions.ExplicitCapture);
 var  regionMatches= regionFinderRegex.Matches(extensionMethodsSourceCode)
									  .Cast<Match>()
									  .Select(it=>(
													ConfigFlag: it.Groups["RegionName"].Value.Replace(" ",""),
													Code: it.Groups["content"].Value,
													StartIndex: it.Index,
													EndIndex: it.Index + it.Length
												  )
											  )
									  .ToList();

 foreach(var region in regionMatches)
 {
#>
bool <#=region.ConfigFlag#> = false;
<#}#>

bool isNullableEnabled= IsNullableEnabled();
\#>
<#=extensionMethodsSourceCode.Substring(0,regionMatches[0].StartIndex).Replace("namespace ProductivityExtensionMethods","namespace \<#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(\"NamespaceHint\")\#>")#>
<#foreach(var region in regionMatches)
{
#>\<#if(<#=region.ConfigFlag#>)
{
\#>
<#=region.Code.Replace("?/*nullableRef*/","\<#=isNullableEnabled?\"?\":\"\"\#>")#>
\<#
}
\#>
<#}#><#=extensionMethodsSourceCode.Substring(regionMatches.Last().EndIndex)#>

\<#+
private bool IsNullableEnabled()
{
EnvDTE.DTE visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
string projectFile=Path.Combine(project.Properties.Item("FullPath").Value.ToString(),project.Properties.Item("FileName").Value.ToString());

XDocument xDoc=XDocument.Load(projectFile);
  
string value = xDoc.Root.Element("PropertyGroup")?.Element("Nullable")?.Value;
return value != null && value == "enable";
}
\#>
