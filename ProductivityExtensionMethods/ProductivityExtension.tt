4<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".methods.tt" #>
\<#@ template debug="false" hostspecific="true" language="C#" \#>
\<#@ assembly name="System.Core" \#>
\<#@ assembly name="EnvDte" \#>
\<#@ assembly name="System.Xml" \#>
\<#@ assembly name="System.Xml.Linq" \#>
\<#@ import namespace="System.IO" \#>
\<#@ import namespace="System.Linq" \#>
\<#@ import namespace="System.Xml.Linq" \#>
\<#@ import namespace="System.Text" \#>
\<#@ import namespace="System.Text.RegularExpressions" \#>
\<#@ import namespace="System.Collections.Generic" \#>
\<#@ import namespace="Microsoft.VisualStudio.TextTemplating" \#>
\<#@ output extension=".cs" \#>
\<#
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Modify next section in order to ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~To include the extension methods in the generated code.~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<#
 string extensionMethodsSourceCode = PreprocessCode(this.Host.ResolvePath("AllExtensions.cs"));

 
 if(extensionMethodsSourceCode==null)
	throw new Exception("Cannot read the source code for extension, or preprocess it.");

 extensionMethodsSourceCode  = extensionMethodsSourceCode.Replace("namespace ProductivityExtensionMethods","namespace \<#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(\"NamespaceHint\")\#>");

 extensionMethodsSourceCode = MakeNullableSyntaxConditional(extensionMethodsSourceCode);

 Regex regionFinderRegex=new Regex(@"(?=( |\t)*#region\s+(?<RegionName>[^\r\n]+))(?:(?<ltparen>(?(content)(?(ltparen)( |\t)*#region\s+[^\r\n]*\r\n|)|( |\t)*#region\s+[^\r\n]*\r\n))|(?<content-ltparen>( |\t)*#endregion(\r\n(?=\r\n))?)|(?(ltparen)(?(( |\t)*#region\s+[^\r\n]*\r\n|( |\t)*#endregion(\r\n(?=\r\n))?)|.+?)|))+",  RegexOptions.IgnoreCase|  RegexOptions.Singleline|  RegexOptions.ExplicitCapture);
 var  regionMatches= regionFinderRegex.Matches(extensionMethodsSourceCode);

 
 foreach(var regionName in regionMatches.Cast<Match>().Select(GetRegionName).Distinct().Where(IsValidVariableName))
 {
#>
bool <#=regionName#> = false;
<#}#>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DO NOT MODIFY AFTER THIS SECTION~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~The changes will be overwritten when nuget package is restored~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~Use partial classes to add extra functionality~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//ToolsVersion:VersionPlaceholder{D8B1B561-500C-4086-91AA-0714457205DA}
bool isNullableCompatible= IsNullableCompatible();
\#><#=regionFinderRegex.Replace(extensionMethodsSourceCode, ConvertRegionToIf) #>\<#+
private bool IsNullableCompatible()
{
	EnvDTE.DTE visualStudio = (EnvDTE.DTE)((IServiceProvider)this.Host).GetCOMService(typeof(EnvDTE.DTE));
	Regex regEx = new Regex(@"^\d+(\.\d+)", RegexOptions.ExplicitCapture);

	Match mtch = regEx.Match(visualStudio.Version);

	return mtch.Success && float.Parse(mtch.Value) >= 16f;
}
\#>
<#+
private string PreprocessCode(string codePath)
{

	string executablePath = null;
	
	foreach(var it in new[]{"Release","Debug"})
	{
		try
		{
		  executablePath = this.Host.ResolvePath(@$"..\CodePreprocessor\bin\{it}\netcoreapp3.0\CodePreprocessor.exe");
		  if(File.Exists(executablePath))
				break;
		}
		catch
		{}
	}
			
    if(executablePath == null)
		throw new ApplicationException("Cannot find the preprocessor executable. Make sure that the preprocessor project is built.");

	try
	{
    ProcessStartInfo psi = new ProcessStartInfo(executablePath, codePath);

    psi.CreateNoWindow = true;
    psi.RedirectStandardOutput = true;
    psi.UseShellExecute = false;
	psi.WorkingDirectory = System.IO.Directory.GetCurrentDirectory();
	
    Process p = Process.Start(psi);

    string s = p.StandardOutput.ReadToEnd();

    p.WaitForExit();

    if (p.ExitCode != 0)
        return null;

    return s;
	}
	catch
	{
	 throw new Exception(executablePath);
	}
}

private string MakeNullableSyntaxConditional(string code)
{
	Regex nullableRegex = new Regex(@"/\*Start:nullableref\*/(?<NullableSyntax>.+?)/\*End:nullableref\*/",RegexOptions.Singleline|  RegexOptions.ExplicitCapture);

	return nullableRegex.Replace(code, mtch => @"\<#if (isNullableCompatible){\#>" + mtch.Groups["NullableSyntax"].Value + @"\<#}\#>");
}
private string GetRegionName(Match match)
{
	return match.Groups["RegionName"].Value.Replace(" ","").Trim();
}
private string ConvertRegionToIf(Match match)
{
    return @$"\<#if ({GetRegionName(match)}){{\#>{match.Groups["content"].Value}\<#}}\#>";
}
private bool IsValidVariableName(string name)
{
	return Regex.IsMatch(name,"^[a-zA-Z_$][a-zA-Z_$0-9]*$");
}
#>